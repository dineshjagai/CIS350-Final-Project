<!DOCTYPE hmtl>

<html>

  <head>

    <!-- ZingChart CDN script -->
    <script src="https://cdn.zingchart.com/zingchart.min.js"></script>

    <style>
      #chart {
        height: 300px;
        width: 300px;
      }
    </style>

  </head>

  <body>

    <h1>Favor Stats</h1>

    <!-- chart container -->
    <div id="chart2"></div>
    <div id="chart1"></div>
    <div id="chart3"></div>

    <!-- fetches data from api/data page & renders chart from data returned -->
    <script>
      // creates variable for url we want to fetch
      const url = 'http://localhost:3000/api/data';
      // fetch call to our /api/data page
      fetch(url)
        // creates promise to work with response from /api/data
        .then(res => {
          // throws error if there is a problem fetching page
          if (!res.ok) {
            // returns error with response text of error
            throw new Error(res.statusText);
          }
          // returns data from /api/data page in json format to next promise
          return res.json();
        })
        // creates promise with returned data from previous promise
        .then(data => {
          // creates favors variable to store JSON data form /api/data
          let favors = data;
          // creates empty favorInfo array
          let favorInfo = [];
          let urgencyInfo = [];
          let categoryMap = new Map();
          let categoryInfo = [];
          let locationInfo = [];
          let locationMap = new Map();

          for (var i = 0; i < 11; i++) {
            urgencyInfo.push(0);
          }

          locationMap.set("CVS", 0);
          locationMap.set("Fresh Grocers", 0);
          locationMap.set("Starbucks", 0);

          // loops through data from employee variable
          favors.forEach(favor => {
            // pushes values from employees variable to empty employeeInfo array
            favorInfo.push([favor.location, parseInt(favor.urgency)]);
            urgencyInfo[parseInt(favor.urgency)] = urgencyInfo[parseInt(favor.urgency)]+1;
            if (!categoryMap.has(favor.category)) {
              categoryMap.set(favor.category, 1);
            } else {
              var count = categoryMap.get(favor.category);
              categoryMap.set(favor.category, count + 1);
            }

            if (locationMap.has(favor.location)) {
              var counts = locationMap.get(favor.location);
              locationMap.set(favor.location, counts + 1);
            }


          });


for (const [key, value] of categoryMap.entries()) {
  categoryInfo.push([key,value]);
}
for (const [key, value] of locationMap.entries()) {
  locationInfo.push([key,value]);
}

          // creates chart const with favorInfo array


          const chart1 = {
            type: 'bar',"title": {
    "text": "Urgency Tracker"},
    "plot": {
    "value-box": {
      "text": "%v"
    },
    "tooltip": {
      "text": "%v"
    }
  }, "scale-y": {"label": {
    "text": 'Number of Favors',

  }},
            "scale-x": {
    "label": {
      "text": 'Urgency'},

    "values": [
      "0","1","2","3","4","5","6","7","8","9","10"
    ]},
            series: [
              {
                values: urgencyInfo
              }
            ]
          };

          const chart2 = {
            type: 'bar',"title": {
    "text": "Category Tracker"},
     "scale-y": {"label": {
    "text": 'Number of Favors',

  }},
            "scale-x": {
    "label": {
      "text": 'Category'}},
            series: [
              {
                values: categoryInfo
              }
            ]
          };

          const chart3 = {
            type: 'bar',"title": {
    "text": "Location Tracker"},
     "scale-y": {"label": {
    "text": 'Number of Favors',

  }},
            "scale-x": {
    "label": {
      "text": 'Popular Locations'}},
            series: [
              {
                values: locationInfo
              }
            ]
          };

          // renders zingchart to the page
          zingchart.render({
            id: 'chart1',
            data: chart2,
            height: '100%',
            width: '100%'
          });


        zingchart.render({
          id: 'chart2',
          data: chart1,
          height: '100%',
          width: '100%'
        });

        zingchart.render({
          id: 'chart1',
          data: chart2,
          height: '100%',
          width: '100%'
        });


      zingchart.render({
        id: 'chart3',
        data: chart3,
        height: '100%',
        width: '100%'
      });
      })
        // catches errors in promise chain
        .catch(error => console.log('fetch error'));
</script>


  </body>

</html>
